
Navigate via the cd command to /usr/lib/ and type the command ‘sudo chown hadoop spark -R’. This will give your account full access to the spark application folder.
Navigate via the cd command to /var/log/ and type the command ‘sudo chown hadoop spark -R’. This will give your account access to modify the log folder, which is necessary for when you begin the Spark service.
In SSH, type the command: “/usr/lib/spark/sbin/start-thriftserver.sh”
Make sure you’ve configured the permissions as per the section above or this won’t work!
Wait about 30 seconds for the Spark application to be fully up and running, and then type: “/usr/lib/spark/bin/beeline”.
In the beeline command line, type the command: “!connect jdbc:hive2://localhost:10001 -n hadoop”. This should connect you to the Spark-SQL service. If it doesn’t, wait a few seconds and try again. It can take up to a minute for the Thriftserver to be ready to connect.
Run a test query on your table, such as: “select count(*) from tablename;”
Spark-SQL is currently reading the data from S3 before querying it, which slows the process significantly. Depending on the size of your dataset, you may be able to use the command “cache table tablename” to place your data into Spark’s local memory. This process may take a while, but it will significantly improve your query speeds.
After caching, run the same test query again, and see the time difference.



CREATE EXTERNAL TABLE if not exists DelayFlight(
Year int, 
Month int, 
DayofMonth int, 
DayOfWeek int, 
DepTime int, 
CRSDepTime int, 
ArrTime int, 
CRSArrTime int, 
UniqueCarrier string, 
FlightNum int, 
TailNum string, 
ActualElapsedTime int, 
CRSElapsedTime int, 
AirTime int, 
ArrDelay int, 
DepDelay int, 
Origin string, 
Dest string, 
Distance int, 
TaxiIn int, 
TaxiOut int, 
Cancelled int, 
CancellationCode string, 
Diverted string, 
CarrierDelay int, 
WeatherDelay int, 
NASDelay int, 
SecurityDelay int, 
LateAircraftDelay int
)
row format delimited fields terminated by ','
TBLPROPERTIES("skip.header.line.count"="1");

describe airlines;
Load data INPATH 's3://awsssignment/DelayedFlights-updated.csv' OVERWRITE INTO TABLE  DelayFlight


Year wise carrier delay from 2003-2010
SELECT Year, avg((CarrierDelay /ArrDelay)*100) from default.delayFlight GROUP BY Year;

Year wise NAS delay from 2003-2010
SELECT Year, avg((NASDelay /ArrDelay)*100) from default.delayFlight GROUP BY Year;

Year wise Weather delay from 2003-2010
SELECT Year, avg((WeatherDelay /ArrDelay)*100) from default.delayFlight GROUP BY Year;

Year wise late aircraft delay from 2003-2010
SELECT Year, avg((LateAircraftDelay /ArrDelay)*100) from default.delayFlight GROUP BY Year;

Year wise security delay from 2003-2010
SELECT Year, avg((SecurityDelay /ArrDelay)*100) from default.delayFlight GROUP BY Year;

